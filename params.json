{"name":"Bernoulli","body":"In probability theory and statistics, the **binomial distribution** is the discrete probability distribution of the number of successes in a sequence of *n* independent yes/no experiments, each of which yields success with probability *p*.\r\n\r\nYou can read more about **Bernoulli trials** and the **binomial distribution** [on Wikipedia](http://en.wikipedia.org/wiki/Binomial_distribution).\r\n\r\n## Installation\r\n\r\nUse RubyGems to install `bernoulli`\r\n\r\n\t$ gem install bernoulli\r\n\r\n## Tutorial\r\n\r\nUsing `bernoulli`, one can calculate the probabilities of bernoulli experiments.\r\n\r\nLet's start by looking at an example.\r\n\r\n**Question:** What is the chance of getting between 25 and 36 sixes when one rolls a die 180 times? What is the expected value and variance of this trial?\r\n\r\nLet's use `bernoulli` to solve this:\r\n\r\nFirst we load up `irb` from the terminal including `bernoulli` as a library.\r\n\r\n\t$ irb -r bernoulli\r\n\t\r\nOr we could just `require 'bernoulli'` in any Ruby script.\r\n\r\nThen we create a new instance of class Bernoulli and calculate our desired probability and properties like so\r\n\r\n\tx = Bernoulli::Distribution.new(180, 1.0/6)\r\n\t# => #<Bernoulli::Distribution @n=180, @p=0.16666666666666666>\r\n\t\r\n\t# The probability of getting between 25 and 36 sixes is\r\n\tx[25..36] # => 0.7665588897840108\r\n\t\r\n\tx.expected_value # => 30.0\r\n\tx.variance # => 25.0\r\n\t\r\nWe could also calculate the standard deviation, excess or skewness:\r\n\t\r\n\tx.standard_deviation # => 5.0\r\n\tx.excess # => 0.006666666666666665\r\n\tx.skewness # => 0.13333333333333336\r\n\t\r\n`bernoulli` can also do empirical tests. Let's look at a smaller example We can simulate the tossing of 4 fair coins\r\n\r\n\ty = Bernoulli::Distribution.new(4, 0.5)\r\n\t# => #<Bernoulli::Distribution @n=4, @p=0.5>\r\n\r\nThe method `sample` gives as a random array of length `n`, where each entry is `1` with a probability of `p`. The methods `sample_value` gives us the number of wins in a random expriment, we could than compare it to `expected_value`.\r\n\r\n\ty.sample # => [1, 0, 1, 0]\r\n\ty.sample # => [0, 0, 1, 0]\r\n\ty.sample # => [1, 1, 1, 1]\r\n\r\n\ty.sample_value # => 2\r\n\ty.sample_value # => 1\r\n\ty.sample_value # => 0\r\n\ty.sample_value # => 2\r\n\t\r\n\ty.expected_value # => 2.0\r\n\r\nLast, but not least, we can create a full table of all possible values and their probabilitys like so\r\n\r\n\tputs y.table\r\n\t\r\nwill produce\r\n\r\n\t0,0.0625\r\n\t1,0.25\r\n\t2,0.375\r\n\t3,0.25\r\n\t4,0.0625\r\n\r\n## Contributing\r\n\r\n`bernoulli` is a really small project. After writing the same code for some project and then losing it two or three times I decided to do it one time and well, so I can just call in the code from here next time.\r\n\r\nFeel free to cantact me about anything I could/should add  or to contribute in any way to this simple library.\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n","tagline":"A Ruby library for the binomial distribution","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}